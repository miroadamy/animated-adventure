[0m[1mdata.aws_subnet.public_subnets[2]: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mdata.aws_subnet.public_subnets[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_partition.current: Reading...[0m[0m
[0m[1mdata.aws_subnet.public_subnets[1]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2830595799][0m
[0m[1mdata.aws_subnet.private_subnets[0]: Reading...[0m[0m
[0m[1mdata.aws_subnet.private_subnets[1]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current[0]: Read complete after 0s [id=992382468947][0m
[0m[1mdata.aws_subnet.private_subnets[2]: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=992382468947][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mdata.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].data.aws_caller_identity.current: Read complete after 0s [id=992382468947][0m
[0m[1mdata.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current[0]: Read complete after 0s [id=arn:aws:iam::992382468947:user/workspace][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=992382468947][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.custom[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.custom[0]: Read complete after 0s [id=513122117][0m
[0m[1mdata.aws_ecrpublic_authorization_token.token: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=eu-west-1][0m
[0m[1mdata.aws_subnet.public_subnets[0]: Read complete after 1s [id=subnet-02782f4085586aa3c][0m
[0m[1mdata.aws_subnet.public_subnets[2]: Read complete after 1s [id=subnet-07cb105c573f23a99][0m
[0m[1mdata.aws_subnet.private_subnets[1]: Read complete after 1s [id=subnet-0d238cf1796869779][0m
[0m[1mdata.aws_subnet.private_subnets[2]: Read complete after 1s [id=subnet-027b9de3a2c1c73b1][0m
[0m[1mdata.aws_subnet.public_subnets[1]: Read complete after 1s [id=subnet-0090a3aba634f2036][0m
[0m[1mdata.aws_subnet.private_subnets[0]: Read complete after 1s [id=subnet-0f2a43cf784460cc7][0m
[0m[1mdata.aws_ecrpublic_authorization_token.token: Read complete after 1s [id=us-east-1][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/eks-karpenter-demo/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "/aws/eks/eks-karpenter-demo/cluster"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "/aws/eks/eks-karpenter-demo/cluster"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "demo"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Project"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Project"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "eks-karpenter-example"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Terraform"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "true"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["cluster-name"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "cluster-name"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "eks-karpenter-demo"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["karpenter.sh/discovery"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "karpenter.sh/discovery"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "eks-karpenter-demo"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["kubernetes.io/cluster/eks-karpenter-demo"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "kubernetes.io/cluster/eks-karpenter-demo"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "owned"
    }

[1m  # module.eks.aws_eks_access_entry.this["cluster_creator"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = (known after apply)
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::992382468947:user/workspace"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::992382468947:user/workspace"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
          [32m+[0m[0m "controllerManager",
          [32m+[0m[0m "scheduler",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "eks-karpenter-demo"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
          [32m+[0m[0m "terraform-aws-modules"                    = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
          [32m+[0m[0m "terraform-aws-modules"                    = "eks"
        }
      [32m+[0m[0m version                       = "1.30"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-0090a3aba634f2036",
              [32m+[0m[0m "subnet-02782f4085586aa3c",
              [32m+[0m[0m "subnet-07cb105c573f23a99",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-eks-irsa"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-eks-irsa"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "eks-karpenter-demo-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
    }

[1m  # module.eks.aws_iam_policy.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "custom" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "eks-karpenter-demo-cluster-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:RunInstances",
                          [32m+[0m[0m "ec2:CreateLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateFleet",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                          [32m+[0m[0m StringLike   = {
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-class-name" = "*"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-node-pool-name"  = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Compute"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateVolume",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                      [32m+[0m[0m Sid       = "Storage"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateNetworkInterface"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name"         = "${aws:PrincipalTag/eks:eks-cluster-name}"
                              [32m+[0m[0m "aws:RequestTag/eks:kubernetes-cni-node-name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Networking"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "LoadBalancer"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:CreateProtection"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "ShieldProtection"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "shield:TagResource"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:RequestTag/eks:eks-cluster-name" = "${aws:PrincipalTag/eks:eks-cluster-name}"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:shield::*:protection/*"
                      [32m+[0m[0m Sid       = "ShieldTagResource"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "eks-karpenter-demo-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "custom" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "eks-karpenter-demo-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-cluster"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-cluster"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-01d0a20129334a7d5"
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "eks-karpenter-demo-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-node"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-karpenter-demo-node"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-01d0a20129334a7d5"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_ephemeral_ports_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Nodes on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node all ports/protocols"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = (known after apply)
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.30"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_ARM_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = (known after apply)
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t4g.small",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "eks-system-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-027b9de3a2c1c73b1",
          [32m+[0m[0m "subnet-0d238cf1796869779",
          [32m+[0m[0m "subnet-0f2a43cf784460cc7",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-system"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Name"                                     = "eks-system"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m version                = "1.30"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "eks-system-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["system"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for eks-system EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "system-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)
        [90m# (2 unchanged attributes hidden)[0m[0m

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                              = "demo"
              [32m+[0m[0m "Name"                                     = "eks-system"
              [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
              [32m+[0m[0m "Terraform"                                = "true"
              [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
              [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
              [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                              = "demo"
              [32m+[0m[0m "Name"                                     = "eks-system"
              [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
              [32m+[0m[0m "Terraform"                                = "true"
              [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
              [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
              [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                              = "demo"
              [32m+[0m[0m "Name"                                     = "eks-system"
              [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
              [32m+[0m[0m "Terraform"                                = "true"
              [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
              [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
              [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
            }
        }
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::992382468947:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::992382468947:user/workspace",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/eks-karpenter-demo"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "eks-karpenter-demo cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
          [32m+[0m[0m "terraform-aws-modules"                    = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"                              = "demo"
          [32m+[0m[0m "Owner"                                    = "Opsfleet"
          [32m+[0m[0m "Project"                                  = "eks-karpenter-example"
          [32m+[0m[0m "Provisioner"                              = "terraform"
          [32m+[0m[0m "Terraform"                                = "true"
          [32m+[0m[0m "cluster-name"                             = "eks-karpenter-demo"
          [32m+[0m[0m "karpenter.sh/discovery"                   = "eks-karpenter-demo"
          [32m+[0m[0m "kubernetes.io/cluster/eks-karpenter-demo" = "owned"
          [32m+[0m[0m "terraform-aws-modules"                    = "eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["system"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 43 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_endpoint          = (known after apply)
  [32m+[0m[0m cluster_name              = "eks-karpenter-demo"
  [32m+[0m[0m cluster_security_group_id = (known after apply)
  [32m+[0m[0m cluster_version           = "1.30"
  [32m+[0m[0m configure_kubectl         = "aws eks update-kubeconfig --region eu-west-1 --name eks-karpenter-demo"
  [32m+[0m[0m node_security_group_id    = (known after apply)
  [32m+[0m[0m private_subnet_ids        = [
      [32m+[0m[0m "subnet-0f2a43cf784460cc7",
      [32m+[0m[0m "subnet-0d238cf1796869779",
      [32m+[0m[0m "subnet-027b9de3a2c1c73b1",
    ]
  [32m+[0m[0m public_subnet_ids         = [
      [32m+[0m[0m "subnet-02782f4085586aa3c",
      [32m+[0m[0m "subnet-0090a3aba634f2036",
      [32m+[0m[0m "subnet-07cb105c573f23a99",
    ]
  [32m+[0m[0m region                    = "eu-west-1"
  [32m+[0m[0m vpc_id                    = "vpc-01d0a20129334a7d5"
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_policy.custom[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 1s [id=/aws/eks/eks-karpenter-demo/cluster][0m
[0m[1mmodule.eks.aws_iam_policy.custom[0]: Creation complete after 1s [id=arn:aws:iam::992382468947:policy/eks-karpenter-demo-cluster-20250325130957157000000004][0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creation complete after 1s [id=eks-karpenter-demo-cluster-20250325130957156900000001][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role.this[0]: Creation complete after 1s [id=eks-system-eks-node-group-20250325130957156900000002][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.custom[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creating...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_iam_policy_document.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_iam_policy_document.this[0]: Read complete after 0s [id=1508872402][0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]: Creation complete after 1s [id=eks-system-eks-node-group-20250325130957156900000002-20250325130958524400000008][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.custom[0]: Creation complete after 1s [id=eks-karpenter-demo-cluster-20250325130957156900000001-20250325130958411700000006][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creation complete after 1s [id=eks-karpenter-demo-cluster-20250325130957156900000001-2025032513095861370000000a][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]: Creation complete after 1s [id=eks-system-eks-node-group-20250325130957156900000002-20250325130958612200000009][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]: Creation complete after 1s [id=eks-system-eks-node-group-20250325130957156900000002-20250325130958433700000007][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creation complete after 1s [id=eks-karpenter-demo-cluster-20250325130957156900000001-2025032513095878800000000b][0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creation complete after 2s [id=sg-054780460800aa5d5][0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creation complete after 2s [id=sg-09043da8fc46101f3][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_all"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 1s [id=sgrule-2148662400][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 2s [id=sgrule-910584019][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 2s [id=sgrule-834321505][0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 3s [id=sgrule-3802929461][0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_ephemeral_ports_tcp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 1s [id=sgrule-319977942][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 3s [id=sgrule-585531456][0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_ephemeral_ports_tcp"]: Creation complete after 1s [id=sgrule-55561227][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_all"]: Creation complete after 4s [id=sgrule-98452086][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 5s [id=sgrule-1427869610][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 5s [id=sgrule-1190378202][0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 6s [id=sgrule-1346971716][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 6s [id=sgrule-3953453014][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 5s [id=sgrule-906014794][0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.eks.module.kms.aws_kms_key.this[0]: Creation complete after 21s [id=fa65ef7e-b63b-4b9a-be1a-d03153b12e9d][0m
[0m[1mmodule.eks.module.kms.aws_kms_alias.this["cluster"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.kms.aws_kms_alias.this["cluster"]: Creation complete after 0s [id=alias/eks/eks-karpenter-demo][0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creation complete after 1s [id=arn:aws:iam::992382468947:policy/eks-karpenter-demo-cluster-ClusterEncryption2025032513101933570000000c][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creation complete after 0s [id=eks-karpenter-demo-cluster-20250325130957156900000001-2025032513102008290000000d][0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creation complete after 9m18s [id=eks-karpenter-demo][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["karpenter.sh/discovery"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["cluster-name"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["kubernetes.io/cluster/eks-karpenter-demo"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Project"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_access_entry.this["cluster_creator"]: Creating...[0m[0m
[0m[1mmodule.eks.data.tls_certificate.this[0]: Reading...[0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_access_entry.this["cluster_creator"]: Creation complete after 1s [id=eks-karpenter-demo:arn:aws:iam::992382468947:user/workspace][0m
[0m[1mmodule.eks.data.tls_certificate.this[0]: Read complete after 1s [id=08332733484502a5c0ee4f44b59e6f9baaa72352][0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["kubernetes.io/cluster/eks-karpenter-demo"]: Creation complete after 1s [id=sg-020152c00a749324b,kubernetes.io/cluster/eks-karpenter-demo][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["karpenter.sh/discovery"]: Creation complete after 1s [id=sg-020152c00a749324b,karpenter.sh/discovery][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["cluster-name"]: Creation complete after 1s [id=sg-020152c00a749324b,cluster-name][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creation complete after 1s [id=sg-020152c00a749324b,Environment][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Project"]: Creation complete after 1s [id=sg-020152c00a749324b,Project][0m
[0m[1mmodule.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"]: Creation complete after 1s [id=sg-020152c00a749324b,Terraform][0m
[0m[1mmodule.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]: Creation complete after 0s [id=eks-karpenter-demo#arn:aws:iam::992382468947:user/workspace#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy][0m
[0m[1mmodule.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creation complete after 1s [id=arn:aws:iam::992382468947:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/22675C7EF68DB0015D83AABD9810A5F5][0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.eks.time_sleep.this[0]: Creation complete after 30s [id=2025-03-25T13:20:07Z][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].module.user_data.null_resource.validate_cluster_service_cidr: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].module.user_data.null_resource.validate_cluster_service_cidr: Creation complete after 0s [id=2139014099296360644][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_launch_template.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_launch_template.this[0]: Creation complete after 6s [id=lt-02a5d92462bc513e0][0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["system"].aws_eks_node_group.this[0]: Creation complete after 1m59s [id=eks-karpenter-demo:eks-system-20250325132013332800000010][0m
[0m[1m[32m
Apply complete! Resources: 43 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcluster_endpoint = "https://22675C7EF68DB0015D83AABD9810A5F5.yl4.eu-west-1.eks.amazonaws.com"
cluster_name = "eks-karpenter-demo"
cluster_security_group_id = "sg-054780460800aa5d5"
cluster_version = "1.30"
configure_kubectl = "aws eks update-kubeconfig --region eu-west-1 --name eks-karpenter-demo"
node_security_group_id = "sg-09043da8fc46101f3"
private_subnet_ids = tolist([
  "subnet-0f2a43cf784460cc7",
  "subnet-0d238cf1796869779",
  "subnet-027b9de3a2c1c73b1",
])
public_subnet_ids = tolist([
  "subnet-02782f4085586aa3c",
  "subnet-0090a3aba634f2036",
  "subnet-07cb105c573f23a99",
])
region = "eu-west-1"
vpc_id = "vpc-01d0a20129334a7d5"
